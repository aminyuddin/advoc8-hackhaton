package com.advoc8.som.hackathon.configuration;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @SuppressWarnings("unused")
	private static final Logger logger = LoggerFactory.getLogger(WebSecurityConfig.class);

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
<<<<<<< HEAD
                .antMatchers("/resources/**", "/build/**", "/vendors/**", "/login").permitAll()
                .antMatchers("/api/**").permitAll()
=======
                .antMatchers("/resources/**", "/build/**", "/vendors/**", "/login", "/api/**", "/files/**").permitAll()
                .antMatchers("/404").permitAll()
                .antMatchers("/403").permitAll()
>>>>>>> 67546b4d72802dc1fc216161fd84cacfe2061f50
                .antMatchers("/hello").access("hasRole('ROLE_ADMIN')")
                .anyRequest().authenticated()
                .and()
            .formLogin()
                .loginPage("/login").usernameParameter("username").passwordParameter("password")
                .and()
            .logout().logoutSuccessUrl("/login?logout")
                .and()
            .exceptionHandling().accessDeniedPage("/403")
                .and()
<<<<<<< HEAD
            .csrf();
=======
            .csrf().disable();
>>>>>>> 67546b4d72802dc1fc216161fd84cacfe2061f50
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication().withUser("user").password("user").roles("USER");
        auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN");
    }

    @Bean
    public PasswordEncoder passwordencoder(){
        return new BCryptPasswordEncoder();
    }
}